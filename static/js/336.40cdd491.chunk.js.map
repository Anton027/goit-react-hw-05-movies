{"version":3,"file":"static/js/336.40cdd491.chunk.js","mappings":"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","sources":["components/SearchBar/SearchBar.js","pages/Movies.jsx","services/Fetch.js"],"sourcesContent":["import { useSearchParams } from \"react-router-dom\";\n\nexport function Searchbar({ onSubmit }) {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const moviename = searchParams.get('moviename');\n\n    const handleOnChange = (e) => {\n        setSearchParams({ moviename: e.currentTarget.value})\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const form = e.currentTarget;\n        setSearchParams({ moviename: form.elements.moviename.value})\n        onSubmit(moviename);\n    }\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input\n                        name=\"moviename\"\n                        type=\"text\"\n                        onChange={handleOnChange}\n                        autoFocus\n                        placeholder=\"Search images and photos\"\n                />\n                <button type=\"submit\">Search</button>\n            </form>\n        </div>\n    )\n} ","\nimport { Searchbar } from \"components/SearchBar/SearchBar\";\nimport { Link, useLocation, useSearchParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\"\nimport { searchMovieFetch } from \"services/Fetch\";\n\nconst Movies = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [page,setPage] = useState(1);\n    const [movies, setMovies] = useState([]);\n    const [movieName, setMovieName] = useState(searchParams.get('query') || '');\n    \n    const location = useLocation();\n\n    useEffect(() => {\n        if (movieName.trim() === '') {\n            return;\n        }\n        searchMovieFetch(movieName, page).then(res => setMovies(res))\n    },[movieName, page])\n    \n    const onSubmit = (movieName) => {\n        setMovieName(movieName);\n        setMovies([]);\n        setPage(1);\n        setSearchParams({query: movieName});\n    }\n    return (\n        <main>\n            <Searchbar onSubmit={onSubmit} />\n            <ul>\n                {movies.map(({ id, title, original_name }) => \n                    <li key={id}>\n                        <Link to={`${id}`} state={{ from: location }}>\n                            {original_name || title}\n                        </Link>\n                    </li>\n                )}\n            </ul>\n        </main>\n    )\n}\n\nexport default Movies;","\nconst axios = require('axios').default;\n\nconst KEY = \"ff98b74c6ada2972698b8eff6707845a\";\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\n\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w300';\n\nexport async function trendingMoviesFetch(page) {\n    try {\n        const response = await axios.get(`trending/all/day?api_key=${KEY}&page=${page}`);\n        const movies = await response.data.results;\n        return movies;\n\n    } catch (error) {\n        return;\n    }\n}\n\nexport async function searchMovieFetch(movie, page) {\n    try {\n        const response = await axios.get(\n            `/search/movie?api_key=${KEY}&language=en-US&query=${movie}&page=${page}&include_adult=false`\n        );\n        const movies = await response.data.results;\n        return movies;\n    } catch (error) {\n        return;\n    }\n}\n\nexport async function movieIdFetch(movieId) {\n    try {\n        const response = await axios.get(\n            `/movie/${movieId}?api_key=${KEY}&language=en-US`\n        );\n        const movies = await response.data;\n        return movies;\n    } catch (error) {\n        return;\n    }\n}\n\nexport async function castFetch(movieId) {\n    try {\n        const response = await axios.get(\n            `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n        );\n        const movies = await response.data;\n        return movies;\n    } catch (error) {\n        return;\n    }\n}\n\nexport async function reviewFetch(movieId) {\n    try {\n        const response = await axios.get(\n            `/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n        );\n        const movies = await response.data;\n        return movies;\n    } catch (error) {\n        return;\n    }\n}"],"names":["Searchbar","onSubmit","useSearchParams","searchParams","setSearchParams","moviename","get","e","preventDefault","form","currentTarget","elements","value","name","type","onChange","autoFocus","placeholder","useState","page","setPage","movies","setMovies","movieName","setMovieName","location","useLocation","useEffect","trim","searchMovieFetch","then","res","query","map","id","title","original_name","to","state","from","axios","require","KEY","defaults","baseURL","IMAGE_URL","trendingMoviesFetch","response","data","results","movie","movieIdFetch","movieId","castFetch","reviewFetch"],"sourceRoot":""}