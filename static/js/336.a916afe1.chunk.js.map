{"version":3,"file":"static/js/336.a916afe1.chunk.js","mappings":"qNAEO,SAASA,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SACxB,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAWA,OACI,0BACI,kBAAMH,SARO,SAACI,GAClBA,EAAEC,iBAEFL,EAASE,GACTC,EAAa,GAChB,EAGO,WACI,kBACQG,KAAK,YACLC,KAAK,OACLC,MAAON,EACPO,SAhBG,SAACL,GACpBD,EAAaC,EAAEM,cAAcF,MAChC,EAemBG,WAAS,EACTC,YAAY,8BAEpB,mBAAQL,KAAK,SAAb,wBAIf,C,kCCmCD,EAzDe,WACX,OAAuBN,EAAAA,EAAAA,UAAS,GAAhC,eAAOY,EAAP,KAAYC,EAAZ,KACA,GAA4Bb,EAAAA,EAAAA,UAAS,IAArC,eAAOc,EAAP,KAAeC,EAAf,KACA,GAAkCf,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACMc,GAAWC,EAAAA,EAAAA,OAQjBC,EAAAA,EAAAA,YAAU,WACY,KAAdjB,IAGJkB,EAAAA,EAAAA,IAAiBlB,EAAWW,GAAMQ,MAAK,SAAAC,GAAG,OAAIN,EAAUM,EAAd,GAC7C,GAAC,CAACpB,EAAWW,IAOd,OACI,6BACI,SAACd,EAAD,CAAWC,SAPF,SAAAE,GACbC,EAAaD,GACbc,EAAU,IACVF,EAAQ,EACX,KAIO,wBAkBKC,EAAOQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,cAAd,OACR,yBACI,SAAC,KAAD,CAAMC,GAAE,UAAKH,GAAMI,MAAO,CAAEC,KAAMZ,GAAlC,SACKS,GAAiBD,KAFjBD,EADD,QAU3B,C,gNC7DKM,EAAQC,EAAAA,MAAAA,QAERC,EAAM,mCACZF,EAAMG,SAASC,QAAU,gCAElB,IAAMC,EAAY,kCAClB,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAmCvB,GAAnC,kGAEwBiB,EAAMO,IAAN,mCAAsCL,EAAtC,iBAAkDnB,IAF1E,cAEOyB,EAFP,gBAGsBA,EAASC,KAAKC,QAHpC,cAGOzB,EAHP,yBAIQA,GAJR,kCAOC0B,QAAQC,IAAR,MAPD,iFAWA,SAAetB,EAAtB,iDAAO,OAAP,oBAAO,WAAgCuB,EAAO9B,GAAvC,kGAEwBiB,EAAMO,IAAN,gCACML,EADN,iCACkCW,EADlC,iBACgD9B,EADhD,yBAFxB,cAEOyB,EAFP,gBAKsBA,EAASC,KAAKC,QALpC,cAKOzB,EALP,yBAMQA,GANR,kCAQC0B,QAAQC,IAAR,MARD,iFAYA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,kGAEwBf,EAAMO,IAAN,iBACTQ,EADS,oBACUb,EADV,oBAFxB,cAEOM,EAFP,gBAKsBA,EAASC,KAL/B,cAKOxB,EALP,yBAMQA,GANR,kCAQC0B,QAAQC,IAAR,MARD,iFAYA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAyBD,GAAzB,kGAEwBf,EAAMO,IAAN,iBACTQ,EADS,4BACkBb,EADlB,oBAFxB,cAEOM,EAFP,gBAKsBA,EAASC,KAL/B,cAKOxB,EALP,yBAMQA,GANR,kCAQC0B,QAAQC,IAAR,MARD,iFAYA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA2BF,GAA3B,kGAEwBf,EAAMO,IAAN,iBACTQ,EADS,4BACkBb,EADlB,oBAFxB,cAEOM,EAFP,gBAKsBA,EAASC,KAL/B,cAKOxB,EALP,yBAMQA,GANR,kCAQC0B,QAAQC,IAAR,MARD,iF","sources":["components/SearchBar/SearchBar.js","pages/Movies.jsx","services/Fetch.js"],"sourcesContent":["import { useState } from \"react\";\n\nexport function Searchbar({ onSubmit }) {\n    const [movieName, setMovieName] = useState('');\n\n    const handleOnChange = (e) => {\n        setMovieName(e.currentTarget.value)\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        onSubmit(movieName);\n        setMovieName('');\n    }\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input\n                        name=\"moviename\"\n                        type=\"text\"\n                        value={movieName}\n                        onChange={handleOnChange}\n                        autoFocus\n                        placeholder=\"Search images and photos\"\n                />\n                <button type=\"submit\">Search</button>\n            </form>\n        </div>\n    )\n} ","// import { MoviesList } from \"components/MoviesList/MoviesList\";\nimport { Searchbar } from \"components/SearchBar/SearchBar\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\"\nimport { searchMovieFetch } from \"services/Fetch\";\n\nconst Movies = () => {\n    const [page,setPage] = useState(1);\n    const [movies, setMovies] = useState([]);\n    const [movieName, setMovieName] = useState('');\n    const location = useLocation();\n\n    // const updateQueryString = (name) => {\n    //     const nextParams = name !== \"\" ? { name } : {};\n    //     setSearchParams(nextParams);\n    // };\n\n\n    useEffect(() => {\n        if (movieName === '') {\n            return;\n        }\n        searchMovieFetch(movieName, page).then(res => setMovies(res))\n    },[movieName, page])\n    \n    const onSubmit = movieName => {\n        setMovieName(movieName);\n        setMovies([]);\n        setPage(1);\n    }\n    return (\n        <main>\n            <Searchbar onSubmit={onSubmit} />\n            <ul>\n                {/* <MoviesList movies={movies} /> */}\n                {/* {movies.map(({\n                        id, poster_path,\n                        title, original_name,\n                        release_date\n                        ,\n                        first_air_date, popularity\n                    }) => \n                        <li key={id}>\n                            <img src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={original_name || title} />\n                            <p>{original_name || title}</p>\n                            <p>{\n                                first_air_date || release_date\n                            }</p>\n                            <p>{popularity}</p>\n                        </li>\n                )} */}\n                {movies.map(({ id, title, original_name }) => \n                    <li key={id}>\n                        <Link to={`${id}`} state={{ from: location }}>\n                            {original_name || title}\n                        </Link>\n                    </li>\n                )}\n            </ul>\n        </main>\n    )\n}\n\nexport default Movies;","\nconst axios = require('axios').default;\n\nconst KEY = \"ff98b74c6ada2972698b8eff6707845a\";\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\"\n\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w300'\nexport async function trendingMoviesFetch(page) {\n    try {\n        const response = await axios.get(`trending/all/day?api_key=${KEY}&page=${page}`);\n        const movies = await response.data.results;\n        return movies;\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport async function searchMovieFetch(movie, page) {\n    try {\n        const response = await axios.get(\n            `/search/movie?api_key=${KEY}&language=en-US&query=${movie}&page=${page}&include_adult=false`\n        );\n        const movies = await response.data.results;\n        return movies;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport async function movieIdFetch(movieId) {\n    try {\n        const response = await axios.get(\n            `/movie/${movieId}?api_key=${KEY}&language=en-US`\n        );\n        const movies = await response.data;\n        return movies;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport async function castFetch(movieId) {\n    try {\n        const response = await axios.get(\n            `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n        );\n        const movies = await response.data;\n        return movies;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport async function reviewFetch(movieId) {\n    try {\n        const response = await axios.get(\n            `/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n        );\n        const movies = await response.data;\n        return movies;\n    } catch (error) {\n        console.log(error);\n    }\n}"],"names":["Searchbar","onSubmit","useState","movieName","setMovieName","e","preventDefault","name","type","value","onChange","currentTarget","autoFocus","placeholder","page","setPage","movies","setMovies","location","useLocation","useEffect","searchMovieFetch","then","res","map","id","title","original_name","to","state","from","axios","require","KEY","defaults","baseURL","IMAGE_URL","trendingMoviesFetch","get","response","data","results","console","log","movie","movieIdFetch","movieId","castFetch","reviewFetch"],"sourceRoot":""}